# RKLLMJS Utils Module Makefile
# Builds type converters and error handling utilities

# Compiler settings
CXX := g++
CXXFLAGS := -std=c++17 -Wall -Wextra -O2 -fPIC
INCLUDES := -I../../../libs/rkllm/include -I$(shell node -p "require('node-addon-api').include")
TEST_INCLUDES := $(INCLUDES) -I/usr/include/gtest

# Library settings
LIBS := -lrkllm
TEST_LIBS := $(LIBS) -lgtest -lgtest_main -pthread

# Directories
SRC_DIR := .
OBJ_DIR := ./obj
TEST_DIR := .
BIN_DIR := ./bin

# Source files
SOURCES := type-converters.cpp error-handler.cpp
TEST_SOURCES := type-converters.test.cpp error-handler.test.cpp

# Object files
OBJECTS := $(SOURCES:%.cpp=$(OBJ_DIR)/%.o)
TEST_OBJECTS := $(TEST_SOURCES:%.test.cpp=$(OBJ_DIR)/%.test.o)

# Output files
STATIC_LIB := $(BIN_DIR)/librkllm-utils.a
TEST_EXECUTABLES := $(TEST_SOURCES:%.test.cpp=$(BIN_DIR)/%-test)

# Default target
.PHONY: all
all: $(STATIC_LIB)

# Create directories
$(OBJ_DIR):
	@mkdir -p $(OBJ_DIR)

$(BIN_DIR):
	@mkdir -p $(BIN_DIR)

# Build static library
$(STATIC_LIB): $(OBJECTS) | $(BIN_DIR)
	@echo "Creating static library: $@"
	ar rcs $@ $^
	@echo "✅ Utils module library built successfully"

# Build object files
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp | $(OBJ_DIR)
	@echo "Compiling: $<"
	$(CXX) $(CXXFLAGS) $(INCLUDES) -c $< -o $@

# Build test object files
$(OBJ_DIR)/%.test.o: $(TEST_DIR)/%.test.cpp | $(OBJ_DIR)
	@echo "Compiling test: $<"
	$(CXX) $(CXXFLAGS) $(TEST_INCLUDES) -c $< -o $@

# Build test executables
$(BIN_DIR)/%-test: $(OBJ_DIR)/%.test.o $(OBJECTS) | $(BIN_DIR)
	@echo "Linking test: $@"
	$(CXX) $^ $(TEST_LIBS) -o $@

# Test targets
.PHONY: test
test: $(TEST_EXECUTABLES)
	@echo "🧪 Running utils module tests..."
	@for test in $(TEST_EXECUTABLES); do \
		echo "Running $$test..."; \
		$$test; \
		if [ $$? -ne 0 ]; then \
			echo "❌ Test $$test failed"; \
			exit 1; \
		fi; \
	done
	@echo "✅ All utils module tests passed"

.PHONY: test-type-converters
test-type-converters: $(BIN_DIR)/type-converters-test
	@echo "🧪 Running type converters tests..."
	$<

.PHONY: test-error-handler
test-error-handler: $(BIN_DIR)/error-handler-test
	@echo "🧪 Running error handler tests..."
	$<

# Code analysis
.PHONY: analyze
analyze:
	@echo "🔍 Running static analysis..."
	cppcheck --enable=all --std=c++17 $(SOURCES) $(TEST_SOURCES)

# Code formatting
.PHONY: format
format:
	@echo "🎨 Formatting code..."
	clang-format -i $(SOURCES) $(wildcard *.hpp) $(TEST_SOURCES)

# Memory check
.PHONY: memcheck
memcheck: $(TEST_EXECUTABLES)
	@echo "🔍 Running memory checks..."
	@for test in $(TEST_EXECUTABLES); do \
		echo "Memory checking $$test..."; \
		valgrind --leak-check=full --error-exitcode=1 $$test; \
	done

# Coverage analysis
.PHONY: coverage
coverage: CXXFLAGS += --coverage
coverage: clean test
	@echo "📊 Generating coverage report..."
	gcov $(SOURCES)
	lcov --capture --directory . --output-file coverage.info
	genhtml coverage.info --output-directory coverage_html
	@echo "Coverage report generated in coverage_html/"

# Performance benchmarks
.PHONY: benchmark
benchmark: CXXFLAGS += -O3 -DNDEBUG
benchmark: $(BIN_DIR)/benchmark-test
	@echo "🏃 Running performance benchmarks..."
	$<

# Build benchmark test (if it exists)
$(BIN_DIR)/benchmark-test: benchmark.cpp $(OBJECTS) | $(BIN_DIR)
	$(CXX) $(CXXFLAGS) $(INCLUDES) $^ $(LIBS) -lbenchmark -lpthread -o $@

# Installation
.PHONY: install
install: $(STATIC_LIB)
	@echo "📦 Installing utils module..."
	@mkdir -p ../../../build/lib
	@mkdir -p ../../../build/include/utils
	cp $(STATIC_LIB) ../../../build/lib/
	cp *.hpp ../../../build/include/utils/
	@echo "✅ Utils module installed"

# Clean targets
.PHONY: clean
clean:
	@echo "🧹 Cleaning utils module..."
	rm -rf $(OBJ_DIR) $(BIN_DIR)
	rm -f *.gcov *.gcda *.gcno coverage.info
	rm -rf coverage_html

.PHONY: clean-all
clean-all: clean
	rm -rf ../../../build/lib/librkllm-utils.a
	rm -rf ../../../build/include/utils

# Help
.PHONY: help
help:
	@echo "RKLLMJS Utils Module Build System"
	@echo "================================="
	@echo ""
	@echo "Available targets:"
	@echo "  all                 - Build static library (default)"
	@echo "  test                - Build and run all tests"
	@echo "  test-type-converters - Run only type converter tests"
	@echo "  test-error-handler   - Run only error handler tests"
	@echo "  analyze             - Run static code analysis"
	@echo "  format              - Format code with clang-format"
	@echo "  memcheck            - Run memory leak detection"
	@echo "  coverage            - Generate code coverage report"
	@echo "  benchmark           - Run performance benchmarks"
	@echo "  install             - Install to build directory"
	@echo "  clean               - Clean build artifacts"
	@echo "  clean-all           - Clean all including installed files"
	@echo "  help                - Show this help message"
	@echo ""
	@echo "Environment variables:"
	@echo "  CXX                 - C++ compiler (default: g++)"
	@echo "  CXXFLAGS            - Additional compiler flags"
	@echo "  NODE_PATH           - Path to Node.js installation"

# Dependencies
-include $(OBJECTS:.o=.d)
-include $(TEST_OBJECTS:.o=.d)

# Generate dependency files
$(OBJ_DIR)/%.d: $(SRC_DIR)/%.cpp | $(OBJ_DIR)
	@$(CXX) $(CXXFLAGS) $(INCLUDES) -MM -MT $(@:.d=.o) $< > $@

$(OBJ_DIR)/%.test.d: $(TEST_DIR)/%.test.cpp | $(OBJ_DIR)
	@$(CXX) $(CXXFLAGS) $(TEST_INCLUDES) -MM -MT $(@:.d=.o) $< > $@
